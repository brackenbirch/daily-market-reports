name: Daily Market Summary

on:
  workflow_dispatch:
  schedule:
    - cron: '0 11 * * 1-5'

jobs:
  generate-report:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install packages
      run: pip install anthropic yfinance pandas tabulate
        
    - name: Create Python script
      run: |
        cat > market_report.py << 'EOF'
        import yfinance as yf
        import anthropic
        import os
        import pandas as pd
        from datetime import datetime
        from tabulate import tabulate
        import json
        
        def fetch_comprehensive_data():
            print("Fetching comprehensive market data...")
            
            instruments = {
                '^GSPC': 'S&P 500',
                '^IXIC': 'NASDAQ',
                '^DJI': 'Dow Jones',
                '^N225': 'Nikkei 225',
                '^HSI': 'Hang Seng',
                '000001.SS': 'Shanghai Composite',
                '^AXJO': 'ASX 200',
                '^FTSE': 'FTSE 100',
                '^GDAXI': 'DAX',
                '^FCHI': 'CAC 40',
                'EURUSD=X': 'EUR/USD',
                'GBPUSD=X': 'GBP/USD',
                'JPY=X': 'USD/JPY',
                'GC=F': 'Gold',
                'CL=F': 'Crude Oil'
            }
            
            data = {}
            success_count = 0
            
            for ticker, name in instruments.items():
                try:
                    stock = yf.Ticker(ticker)
                    hist = stock.history(period="5d")
                    
                    if len(hist) >= 2:
                        current = float(hist['Close'].iloc[-1])
                        previous = float(hist['Close'].iloc[-2])
                        change_pct = ((current - previous) / previous) * 100
                        
                        data[name] = {
                            'price': round(current, 2),
                            'change': round(change_pct, 2)
                        }
                        
                        print(f"‚úÖ {name}: {current:.2f} ({change_pct:+.2f}%)")
                        success_count += 1
                        
                except Exception as e:
                    print(f"‚ùå {name}: Error - {e}")
            
            print(f"Successfully fetched {success_count} instruments")
            return data
        
        def create_market_summary(data):
            # Create a text summary of market data
            summary = "CURRENT MARKET DATA:\n\n"
            
            # Group data
            us_markets = ['S&P 500', 'NASDAQ', 'Dow Jones']
            asian_markets = ['Nikkei 225', 'Hang Seng', 'Shanghai Composite', 'ASX 200']
            european_markets = ['FTSE 100', 'DAX', 'CAC 40']
            currencies = ['EUR/USD', 'GBP/USD', 'USD/JPY']
            commodities = ['Gold', 'Crude Oil']
            
            groups = [
                ('US MARKETS', us_markets),
                ('ASIAN MARKETS', asian_markets),
                ('EUROPEAN MARKETS', european_markets),
                ('CURRENCIES', currencies),
                ('COMMODITIES', commodities)
            ]
            
            for group_name, instruments in groups:
                summary += f"{group_name}:\n"
                for instrument in instruments:
                    if instrument in data:
                        info = data[instrument]
                        summary += f"- {instrument}: {info['price']} ({info['change']:+.2f}%)\n"
                summary += "\n"
            
            return summary
        
        def generate_professional_report(market_summary):
            print("Generating professional report...")
            
            client = anthropic.Anthropic(api_key=os.environ['ANTHROPIC_API_KEY'])
            
            # Create the prompt without f-strings to avoid issues
            prompt = """You are a senior financial analyst creating a comprehensive daily market summary for institutional portfolio managers.

""" + market_summary + """

Create a professional, detailed report with these sections:

**üéØ EXECUTIVE SUMMARY**
Provide a compelling 3-sentence overview highlighting the most significant market moves and themes from the data above.

**üåè ASIAN MARKETS OVERNIGHT**
Analyze Asian market performance using the real data:
- Focus on Nikkei 225, Hang Seng, Shanghai Composite, ASX 200
- Discuss USD/JPY movement and implications  
- Highlight key themes (central bank policy, trade, earnings)
- Be specific about the actual numbers shown
[Target: 200 words]

**üá™üá∫ EUROPEAN MARKETS SUMMARY**
Analyze European market performance:
- Cover FTSE 100, DAX, CAC 40 with actual data
- Discuss EUR/USD and GBP/USD currency movements
- Address ECB policy implications and economic developments
- Connect moves to broader market themes
[Target: 200 words]

**üá∫üá∏ US MARKET OUTLOOK**
Comprehensive US market analysis:
- Detailed analysis of S&P 500, NASDAQ, Dow Jones performance
- Federal Reserve policy considerations
- Sector rotation themes evident in the data
- Trading outlook based on momentum
[Target: 200 words]

**üí± CURRENCY & COMMODITIES WATCH**
Brief analysis of:
- Major currency moves (EUR/USD, GBP/USD, USD/JPY)
- Gold and Crude Oil performance
- Implications for risk sentiment
[Target: 100 words]

**üîë KEY TAKEAWAYS & TRADING THEMES**
- 3 bullet points summarizing the day's most important market themes
- Focus on actionable insights for portfolio managers

Use the specific numbers from the data. Write in sophisticated financial language appropriate for institutional clients."""
            
            response = client.messages.create(
                model="claude-3-5-sonnet-20241022",
                max_tokens=4000,
                messages=[{"role": "user", "content": prompt}]
            )
            
            return response.content[0].text
        
        def save_enhanced_report(content, data):
            os.makedirs('reports', exist_ok=True)
            today = datetime.now().strftime('%Y-%m-%d')
            filename = f'reports/market-summary-{today}.md'
            
            with open(filename, 'w') as f:
                f.write(f"# üìà Enhanced Daily Market Summary\n")
                f.write(f"**{datetime.now().strftime('%A, %B %d, %Y')}**\n\n")
                f.write(f"*Comprehensive analysis of {len(data)} global instruments*\n\n")
                f.write("---\n\n")
                
                # Add the main analysis
                f.write(content)
                f.write("\n\n---\n\n")
                
                # Add data tables
                f.write("## üìä MARKET DATA SUMMARY\n\n")
                
                # Create simple tables
                us_data = []
                asian_data = []
                europe_data = []
                fx_data = []
                commodity_data = []
                
                for name, info in data.items():
                    row = [name, f"{info['price']:.2f}", f"{info['change']:+.2f}%"]
                    
                    if name in ['S&P 500', 'NASDAQ', 'Dow Jones']:
                        us_data.append(row)
                    elif name in ['Nikkei 225', 'Hang Seng', 'Shanghai Composite', 'ASX 200']:
                        asian_data.append(row)
                    elif name in ['FTSE 100', 'DAX', 'CAC 40']:
                        europe_data.append(row)
                    elif name in ['EUR/USD', 'GBP/USD', 'USD/JPY']:
                        fx_data.append(row)
                    elif name in ['Gold', 'Crude Oil']:
                        commodity_data.append(row)
                
                tables = [
                    ('### US MARKETS', us_data),
                    ('### ASIAN MARKETS', asian_data),
                    ('### EUROPEAN MARKETS', europe_data),
                    ('### CURRENCIES', fx_data),
                    ('### COMMODITIES', commodity_data)
                ]
                
                headers = ['Instrument', 'Level', 'Change %']
                
                for title, table_data in tables:
                    if table_data:
                        f.write(f"{title}\n\n")
                        table = tabulate(table_data, headers=headers, tablefmt='pipe')
                        f.write(table)
                        f.write("\n\n")
                
                # Add performance highlights
                sorted_data = sorted(data.items(), key=lambda x: x[1]['change'], reverse=True)
                
                f.write("## üéØ PERFORMANCE HIGHLIGHTS\n\n")
                f.write("**Top Performers:**\n")
                for name, info in sorted_data[:5]:
                    f.write(f"- {name}: {info['change']:+.2f}%\n")
                
                f.write("\n**Biggest Declines:**\n")
                for name, info in sorted_data[-3:]:
                    f.write(f"- {name}: {info['change']:+.2f}%\n")
                
                f.write(f"\n\n*Report generated: {datetime.now().strftime('%Y-%m-%d %H:%M:%S UTC')}*\n")
            
            return filename
        
        # Main execution
        try:
            market_data = fetch_comprehensive_data()
            
            if len(market_data) < 3:
                raise Exception("Not enough market data available")
            
            summary = create_market_summary(market_data)
            report = generate_professional_report(summary)
            filename = save_enhanced_report(report, market_data)
            
            print(f"\nüéâ SUCCESS!")
            print(f"üìÑ Report: {filename}")
            print(f"üìä Instruments: {len(market_data)}")
            
            # Save info for GitHub issue
            with open('success_info.json', 'w') as f:
                json.dump({
                    'filename': filename,
                    'count': len(market_data),
                    'instruments': list(market_data.keys())
                }, f)
            
        except Exception as e:
            print(f"‚ùå ERROR: {e}")
            raise
        EOF
        
    - name: Run market report script
      env:
        ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
      run: python market_report.py
        
    - name: Commit enhanced report
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add reports/
        git commit -m "üìä Enhanced market summary - $(date '+%Y-%m-%d')" || echo "Nothing to commit"
        git push

    - name: Create GitHub issue notification
      if: success()
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          
          try {
            const info = JSON.parse(fs.readFileSync('success_info.json', 'utf8'));
            const reportContent = fs.readFileSync(info.filename, 'utf8');
            const preview = reportContent.substring(0, 700) + '...';
            
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `üìä Enhanced Daily Market Summary - ${new Date().toLocaleDateString()}`,
              body: `## üéâ Your Enhanced Market Report is Ready!

**üìà Report Details:**
- **Instruments Analyzed:** ${info.count}
- **Markets Covered:** ${info.instruments.join(', ')}
- **Format:** Professional institutional analysis

### üìñ Preview:
\`\`\`markdown
${preview}
\`\`\`

**[üìÑ View Full Report](https://github.com/${context.repo.owner}/${context.repo.repo}/blob/main/${info.filename})**

---
*This enhanced report includes real-time data, professional analysis, formatted tables, and performance highlights.*`
            });
            
            console.log('‚úÖ GitHub issue created');
            
          } catch (error) {
            console.log('‚ùå Issue creation error:', error.message);
          }
