name: Daily Market Summary

on:
  workflow_dispatch:
  schedule:
    - cron: '0 11 * * 1-5'

jobs:
  generate-report:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install packages
      run: pip install anthropic yfinance pandas tabulate
        
    - name: Create data fetcher
      run: |
        cat > fetch_data.py << 'EOF'
        import yfinance as yf
        import json
        
        instruments = {
            '^GSPC': 'S&P 500', '^IXIC': 'NASDAQ', '^DJI': 'Dow Jones',
            '^N225': 'Nikkei 225', '^HSI': 'Hang Seng', '000001.SS': 'Shanghai Composite', '^AXJO': 'ASX 200',
            '^FTSE': 'FTSE 100', '^GDAXI': 'DAX', '^FCHI': 'CAC 40',
            'EURUSD=X': 'EUR/USD', 'GBPUSD=X': 'GBP/USD', 'JPY=X': 'USD/JPY',
            'GC=F': 'Gold', 'CL=F': 'Crude Oil'
        }
        
        data = {}
        for ticker, name in instruments.items():
            try:
                stock = yf.Ticker(ticker)
                hist = stock.history(period="5d")
                if len(hist) >= 2:
                    current = float(hist['Close'].iloc[-1])
                    previous = float(hist['Close'].iloc[-2])
                    change_pct = ((current - previous) / previous) * 100
                    data[name] = {'price': round(current, 2), 'change': round(change_pct, 2)}
                    print(f"✅ {name}: {current:.2f} ({change_pct:+.2f}%)")
            except:
                pass
        
        with open('market_data.json', 'w') as f:
            json.dump(data, f)
        print(f"Fetched {len(data)} instruments")
        EOF

    - name: Create prompt template
      run: |
        cat > prompt_template.txt << 'EOF'
        You are a senior financial analyst creating a comprehensive daily market summary for institutional portfolio managers.

        MARKET_DATA_PLACEHOLDER

        Create a professional, detailed report with these sections:

        **EXECUTIVE SUMMARY**
        Provide a compelling 3-sentence overview highlighting the most significant market moves and themes from the data above.

        **ASIAN MARKETS OVERNIGHT**
        Analyze Asian market performance using the real data:
        - Focus on Nikkei 225, Hang Seng, Shanghai Composite, ASX 200
        - Discuss USD/JPY movement and implications
        - Highlight key themes (central bank policy, trade, earnings)
        - Be specific about the actual numbers shown

        **EUROPEAN MARKETS SUMMARY**
        Analyze European market performance:
        - Cover FTSE 100, DAX, CAC 40 with actual data
        - Discuss EUR/USD and GBP/USD currency movements
        - Address ECB policy implications and economic developments
        - Connect moves to broader market themes

        **US MARKET OUTLOOK**
        Comprehensive US market analysis:
        - Detailed analysis of S&P 500, NASDAQ, Dow Jones performance
        - Federal Reserve policy considerations
        - Sector rotation themes evident in the data
        - Trading outlook based on momentum

        **CURRENCY & COMMODITIES WATCH**
        Brief analysis of:
        - Major currency moves (EUR/USD, GBP/USD, USD/JPY)
        - Gold and Crude Oil performance
        - Implications for risk sentiment

        **KEY TAKEAWAYS & TRADING THEMES**
        - 3 bullet points summarizing the day's most important market themes
        - Focus on actionable insights for portfolio managers

        Use the specific numbers from the data. Write in sophisticated financial language appropriate for institutional clients.
        EOF

    - name: Create report generator
      run: |
        cat > generate_report.py << 'EOF'
        import anthropic
        import json
        import os
        from datetime import datetime
        from tabulate import tabulate
        
        # Load market data
        with open('market_data.json', 'r') as f:
            data = json.load(f)
        
        # Load prompt template
        with open('prompt_template.txt', 'r') as f:
            prompt_template = f.read()
        
        # Create market data summary
        summary_lines = ["CURRENT MARKET DATA:", ""]
        
        groups = [
            ("US MARKETS", ['S&P 500', 'NASDAQ', 'Dow Jones']),
            ("ASIAN MARKETS", ['Nikkei 225', 'Hang Seng', 'Shanghai Composite', 'ASX 200']),
            ("EUROPEAN MARKETS", ['FTSE 100', 'DAX', 'CAC 40']),
            ("CURRENCIES", ['EUR/USD', 'GBP/USD', 'USD/JPY']),
            ("COMMODITIES", ['Gold', 'Crude Oil'])
        ]
        
        for group_name, instruments in groups:
            summary_lines.append(f"{group_name}:")
            for instrument in instruments:
                if instrument in data:
                    info = data[instrument]
                    summary_lines.append(f"- {instrument}: {info['price']} ({info['change']:+.2f}%)")
            summary_lines.append("")
        
        market_summary = "\n".join(summary_lines)
        
        # Replace placeholder in prompt
        final_prompt = prompt_template.replace("MARKET_DATA_PLACEHOLDER", market_summary)
        
        # Generate report
        print("Generating report with Claude...")
        client = anthropic.Anthropic(api_key=os.environ['ANTHROPIC_API_KEY'])
        
        response = client.messages.create(
            model="claude-3-5-sonnet-20241022",
            max_tokens=4000,
            messages=[{"role": "user", "content": final_prompt}]
        )
        
        # Create enhanced report file
        os.makedirs('reports', exist_ok=True)
        today = datetime.now().strftime('%Y-%m-%d')
        filename = f'reports/market-summary-{today}.md'
        
        with open(filename, 'w') as f:
            f.write("# Enhanced Daily Market Summary\n")
            f.write(f"**{datetime.now().strftime('%A, %B %d, %Y')}**\n\n")
            f.write(f"*Analysis of {len(data)} global instruments*\n\n")
            f.write("---\n\n")
            
            # Add Claude's analysis
            f.write(response.content[0].text)
            f.write("\n\n---\n\n")
            
            # Add data tables
            f.write("## MARKET DATA TABLES\n\n")
            
            for title, instruments in groups:
                table_data = []
                for instrument in instruments:
                    if instrument in data:
                        info = data[instrument]
                        table_data.append([instrument, f"{info['price']:.2f}", f"{info['change']:+.2f}%"])
                
                if table_data:
                    f.write(f"### {title}\n\n")
                    headers = ['Instrument', 'Level', 'Change %']
                    table = tabulate(table_data, headers=headers, tablefmt='pipe')
                    f.write(table)
                    f.write("\n\n")
            
            # Performance highlights
            sorted_data = sorted(data.items(), key=lambda x: x[1]['change'], reverse=True)
            
            f.write("## PERFORMANCE HIGHLIGHTS\n\n")
            f.write("**Top Performers:**\n")
            for name, info in sorted_data[:5]:
                f.write(f"- {name}: {info['change']:+.2f}%\n")
            
            f.write("\n**Biggest Declines:**\n")
            for name, info in sorted_data[-3:]:
                f.write(f"- {name}: {info['change']:+.2f}%\n")
            
            f.write(f"\n\n*Generated: {datetime.now().strftime('%Y-%m-%d %H:%M:%S UTC')}*\n")
        
        # Save summary for GitHub issue
        with open('report_info.json', 'w') as f:
            json.dump({
                'filename': filename,
                'count': len(data),
                'top_performer': max(data.items(), key=lambda x: x[1]['change']),
                'biggest_decline': min(data.items(), key=lambda x: x[1]['change'])
            }, f)
        
        print(f"Enhanced report saved: {filename}")
        EOF

    - name: Fetch market data
      run: python fetch_data.py
        
    - name: Generate enhanced report
      env:
        ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
      run: python generate_report.py
        
    - name: Commit report
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add reports/
        git commit -m "📊 Enhanced market summary - $(date '+%Y-%m-%d')" || echo "Nothing to commit"
        git push

    - name: Create GitHub issue
      if: success()
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          try {
            const info = JSON.parse(fs.readFileSync('report_info.json', 'utf8'));
            const content = fs.readFileSync(info.filename, 'utf8');
            const preview = content.substring(0, 500) + '...';
            
            const topPerformer = info.top_performer;
            const biggestDecline = info.biggest_decline;
            
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `📊 Enhanced Market Summary - ${new Date().toLocaleDateString()}`,
              body: `## 🎉 Your Enhanced Market Report is Ready!

**📈 Market Highlights:**
- **Top Performer:** ${topPerformer[0]} (${topPerformer[1].change > 0 ? '+' : ''}${topPerformer[1].change}%)
- **Biggest Decline:** ${biggestDecline[0]} (${biggestDecline[1].change}%)
- **Total Instruments:** ${info.count}

### Preview:
\`\`\`
${preview}
\`\`\`

**[📄 View Full Report](https://github.com/${context.repo.owner}/${context.repo.repo}/blob/main/${info.filename})**`
            });
            console.log('✅ GitHub issue created');
          } catch (error) {
            console.log('❌ Issue creation error:', error.message);
          }
